package adminEventos;
//
//  Generated by StarUML(tm) Java Add-In

import DTOS.campus.UbicacionDTO;
import DTOS.evento.EventoConsultableDTO;
import DTOS.evento.TipoEventoEnumDTO;
import accesoUbicaciones.FachadaAccesoUbicaciones;
import accesoUbicaciones.IAccesoUbicaciones;
import excepciones.NegocioException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import objetosNegocio.Evento;

//
//  @ Project : Aulas
//  @ File Name : ControlAdminEventos.java
//  @ Date : 05/05/2024
//  @ Author : 
//
//




public class ControlAdminEventos {
    private Evento eventoBO;
    private final static Logger LOG = Logger.getLogger(ControlAdminEventos.class.getName());
    
    public ControlAdminEventos() {
        this.eventoBO=new Evento();
    }

    protected EventoConsultableDTO agregarEvento(EventoConsultableDTO evento) throws NegocioException{
        IAccesoUbicaciones accesoUbi=new FachadaAccesoUbicaciones();
        try{
            if (evento.getUbicacion() != null && evento.getUbicacion().getIdentificador() != null) {
                UbicacionDTO ubicacion = accesoUbi.recuperarUbicacion(new UbicacionDTO(evento.getUbicacion().getIdentificador()));
                if (ubicacion != null) {
                    System.out.println(ubicacion);
                    evento.setUbicacion(ubicacion);
                    EventoConsultableDTO e=eventoBO.agregarEvento(evento);
                    if (e != null) {
                        if (accesoUbi.agregarEventoAUbicacion(ubicacion, e)) 
                            return e;
                        else{
                            LOG.log(Level.SEVERE, "No se agrego el evento a los eventos de la ubicacion");
                            if (eliminarEvento(evento)) {
                                LOG.log(Level.SEVERE, "Se elimino el evento");
                            }else LOG.log(Level.SEVERE, "No se elimino el evento");
                        } 
                    }throw new NegocioException("Ocurrio un error al agregar el evento");
                }throw new NegocioException("La ubicacion ingresada no existe");
            }throw new NegocioException("Debe ingresar una ubicacion para el evento");
        }catch(NegocioException e){
            throw e;
        }
    }

    protected EventoConsultableDTO editarEvento(EventoConsultableDTO evento,List<String> camposModificados) throws NegocioException{
        try{
            return this.eventoBO.editarEvento(evento, camposModificados);
        }catch(NegocioException e){
            throw e;
        }
    }

    protected boolean eliminarEvento(EventoConsultableDTO evento) throws NegocioException{
        try {
            return this.eventoBO.eliminarEvento(evento);
        } catch (NegocioException e) {
            throw e;
        }
    }

    protected List<EventoConsultableDTO> obtenerEventos() throws NegocioException{
        try {
            return this.eventoBO.obtenerEventos();
        } catch (NegocioException e) {
            throw e;
        }
    }
    
    protected List<EventoConsultableDTO> obtenerEventos(String tipoEvento) throws NegocioException{
        try {
            return this.eventoBO.obtenerEventos(tipoEvento);
        } catch (NegocioException e) {
            throw e;
        }
    }
    
    protected List<EventoConsultableDTO> obtenerEventos(Calendar fechaFiltro) throws NegocioException{
        try {
            List<EventoConsultableDTO> eventos=this.eventoBO.obtenerEventos();
            return filtrarEventosPorFecha(eventos, fechaFiltro);
        } catch (NegocioException e) {
            throw e;
        }
    }
    
    protected List<EventoConsultableDTO> obtenerEventos(String tipoEvento, Calendar fechaFiltro)throws NegocioException{
        try {
            List<EventoConsultableDTO> eventos=this.eventoBO.obtenerEventos(tipoEvento);
            return filtrarEventosPorFecha(eventos, fechaFiltro);
        } catch (NegocioException e) {
            throw e;
        }
    }
    
    private List<EventoConsultableDTO> filtrarEventosPorFecha(List<EventoConsultableDTO> eventos, Calendar fechaFiltro){
        Calendar inicioDia = fechaFiltro;
        //inicioDia.setTimeZone(TimeZone.getTimeZone("America/Arizona"));
//        System.out.println(inicioDia.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US));
//        System.out.println("dia: "+inicioDia.get(Calendar.DAY_OF_MONTH));
        inicioDia.set(Calendar.HOUR_OF_DAY, 0);
        inicioDia.set(Calendar.MINUTE, 0);

        String diaSemana = obtenerDiaSemana(fechaFiltro);

        List<EventoConsultableDTO> eventosFiltrados = new ArrayList<>();
        String[] arrDias;
        for (EventoConsultableDTO evento : eventos) {
//            System.out.println("evento: "+evento.getNombre()+", fecha: "+evento.getFechaInicio().getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US));
//            System.out.println(evento.getFechaInicio().getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US));
//            System.out.println("dia 2: "+evento.getFechaInicio().get(Calendar.DAY_OF_MONTH));
            if (evento.getTipo().equals(TipoEventoEnumDTO.UNICO_UN_DIA)) {
                if (evento.getFechaInicio().get(Calendar.DAY_OF_MONTH)==inicioDia.get(Calendar.DAY_OF_MONTH)) {
                    eventosFiltrados.add(evento);
                }
            } else {
                arrDias = evento.getDiasSemana().split(",");
                for (String arrDia : arrDias) {
                    if (arrDia.equals(diaSemana)) {
                        eventosFiltrados.add(evento);
                    }
                }
            }
        }
        return eventosFiltrados;
    }
    
    private String obtenerDiaSemana(Calendar fecha) {
        String diaSemana = fecha.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US);
        String diaEspanol = null;
        switch (diaSemana) {
            case "Sunday" ->
                diaEspanol = "Do";
            case "Monday" ->
                diaEspanol = "Lu";
            case "Tueday" ->
                diaEspanol = "Ma";
            case "Wednesday" ->
                diaEspanol = "Mi";
            case "Thursday" ->
                diaEspanol = "Ju";
            case "Friday" ->
                diaEspanol = "Vi";
            case "Saturday" ->
                diaEspanol = "Sa";
        }
        return diaEspanol;
    }
    
    protected EventoConsultableDTO obtenerEvento(EventoConsultableDTO evento)throws NegocioException{
        try {
            return this.eventoBO.obtenerEvento(evento);
        } catch (NegocioException e) {
            throw e;
        }
    }
}
