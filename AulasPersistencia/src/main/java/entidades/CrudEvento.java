package entidades;

import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.UpdateResult;
import excepcioness.PersistenciaExceptionn;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bson.conversions.Bson;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Aulas
//  @ File Name : CrudEvento.java
//  @ Date : 04/05/2024
//  @ Author : Luisa
//
//


public class CrudEvento {
    private MongoCollection<EntidadEvento> coleccion;
    private Logger LOG =Logger.getLogger(CrudEvento.class.getName());
    private IConexion conexion;

    public void CrudEvento() {
        conexion=new Conexion();
        coleccion = conexion.ConversionDocumentEvento();
    }

    public EntidadEvento agregarEvento(EntidadEvento evento)throws PersistenciaExceptionn {
         try {
            coleccion.insertOne(evento);
            return evento;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al agregar el evento.");
        }
    }

    public EntidadEvento editarEvento(EntidadEvento evento,List<String> camposModificados) throws PersistenciaExceptionn{
        List<Bson> updates = new ArrayList<>();
        if (evento.getTipo() != null && evento.getTipo().equals(EntidadTipoEventoEnum.SEMANAL)) {
            if (camposModificados.contains("fechaFin")) {
                updates.add(Updates.set("fechaFin", evento.getFechaFin()));
            }
            if (camposModificados.contains("diasSemana")) {
                updates.add(Updates.set("diasSemana", evento.getDiasSemana()));
            }
        }
        for (int i = 0; i < camposModificados.size(); i++) {
            switch (camposModificados.get(i)) {
                case "nombre":
                    updates.add(Updates.set("nombre", evento.getNombre()));
                    break;
                case "descripcion":
                    updates.add(Updates.set("descripcion", evento.getDescripcion()));
                    break;
                case "ubicacion":
                    updates.add(Updates.set("ubicacion", evento.getUbicacion()));
                    break;
                case "color":
                    updates.add(Updates.push("color", evento.getColor()));
                    break;
                case "fechaInicio":
                    updates.add(Updates.set("fechaInicio", evento.getFechaInicio()));
                    break;
                case "horaInicio":
                    updates.add(Updates.push("horaInicio", evento.getHoraInicio()));
                    break;
                case "horasDuracion":
                    updates.add(Updates.push("horasDuracion", evento.getHorasDuracionEvento()));
                    break;
            }
        }
        Bson filtro = Filters.eq("nombre", evento.getNombre());
        UpdateResult result;
        try {
            result = coleccion.updateOne(filtro, Updates.combine(updates));
        } catch (MongoException ex) {
            LOG.log(Level.SEVERE, ex.getMessage(), ex);
            throw new PersistenciaExceptionn("Hubo un error al actualizar la pelicula");
        }
        if (result.getModifiedCount() > 0) {
            return evento;
        }
        return null;
    }

    public boolean eliminarEvento(EntidadEvento evento)throws PersistenciaExceptionn{
        try {
            //si el conteo de documentos eliminados es mayor a 0 regresa true, false caso contrario
            return coleccion.deleteOne(Filters.eq("nombre", evento.getNombre())).getDeletedCount() > 0;
        } catch (MongoException e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al eliminar el evento");
        }
    }

    public List<EntidadEvento> obtenerEventos() throws PersistenciaExceptionn{
        try {
            List<EntidadEvento> eventos = new ArrayList<>();
            this.coleccion.find().into(eventos);
            return eventos;
        } catch (MongoException e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al consultar los eventos");
        }
    }
}
