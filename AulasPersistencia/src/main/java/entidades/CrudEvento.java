package entidades;

import com.mongodb.MongoException;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.InsertOneResult;
import com.mongodb.client.result.UpdateResult;
import excepcioness.PersistenciaExceptionn;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bson.conversions.Bson;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Aulas
//  @ File Name : CrudEvento.java
//  @ Date : 04/05/2024
//  @ Author : Luisa
//
//


public class CrudEvento {
    private static MongoCollection<EntidadEvento> coleccion;
    private Logger LOG =Logger.getLogger(CrudEvento.class.getName());

    public CrudEvento() {
        CrudEvento.coleccion = Conexion.getDatabasee().getCollection("Eventos", EntidadEvento.class);
    }

    public EntidadEvento agregarEvento(EntidadEvento evento)throws PersistenciaExceptionn {
         try {
            InsertOneResult result=coleccion.insertOne(evento);
            if(result.getInsertedId()!=null)return evento;
            return null;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al agregar el evento.");
        }
    }

    public EntidadEvento editarEvento(EntidadEvento evento,List<String> camposModificados) throws PersistenciaExceptionn{
        List<Bson> updates = new ArrayList<>();
        if (evento.getTipo() != null ) {
            if(evento.getTipo().equals(EntidadTipoEventoEnum.UNICO_UN_DIA)){
                if (camposModificados.contains("fechaFin")) {
                    updates.add(Updates.set("fechaFin", evento.getFechaFin()));
                }
                if (camposModificados.contains("fechaInicio")) {
                    updates.add(Updates.set("fechaInicio", evento.getFechaInicio()));
                } 
            }else{
                if (camposModificados.contains("diasSemana")) {
                    updates.add(Updates.set("diasSemana", evento.getDiasSemana()));
                }
            }
            for (int i = 0; i < camposModificados.size(); i++) {
                switch (camposModificados.get(i)) {
                    case "nombre" -> updates.add(Updates.set("nombre", evento.getNombre()));
                    case "descripcion" -> updates.add(Updates.set("descripcion", evento.getDescripcion()));
                    case "ubicacion" -> updates.add(Updates.set("ubicacion", evento.getUbicacion()));
                    case "color" -> updates.add(Updates.set("color", evento.getColor()));
                    case "horaInicio" -> updates.add(Updates.set("horaInicio", evento.getHoraInicio()));
                    case "horasDuracion" -> updates.add(Updates.set("horasDuracion", evento.getHorasDuracionEvento()));
                }
            }
            Bson filtro = Filters.eq("_id", evento.getId());
            UpdateResult result;
            try {
                result = coleccion.updateOne(filtro, updates);
                if (result.getModifiedCount() > 0) {
                    return evento;
                }
            } catch (MongoException ex) {
                LOG.log(Level.SEVERE, ex.getMessage(), ex);
                throw new PersistenciaExceptionn("Hubo un error al actualizar el evento");
            }
        }
        return null;
    }

    public boolean eliminarEvento(EntidadEvento evento)throws PersistenciaExceptionn{
        try {
            //si el conteo de documentos eliminados es mayor a 0 regresa true, false caso contrario
            return coleccion.deleteOne(Filters.eq("nombre", evento.getNombre())).getDeletedCount() > 0;
        } catch (MongoException e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al eliminar el evento");
        }
    }

    public List<EntidadEvento> obtenerEventos() throws PersistenciaExceptionn{
        try {
            List<EntidadEvento> eventos = new ArrayList<>();
            FindIterable<EntidadEvento> it=this.coleccion.find();
            if(it.first()!=null){
                for (EntidadEvento ev : it) {
                    eventos.add(ev);
                }
                return eventos;
            }
            return null;
        } catch (MongoException e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al consultar los eventos");
        }
    }
    
    public List<EntidadEvento> obtenerEventos(String tipoEvento) throws PersistenciaExceptionn{
        try {
            List<EntidadEvento> eventos = new ArrayList<>();
            EntidadTipoEventoEnum tipo;
            if(tipoEvento.equalsIgnoreCase("semanal")) tipo=EntidadTipoEventoEnum.SEMANAL;
            else tipo=EntidadTipoEventoEnum.UNICO_UN_DIA;
            FindIterable<EntidadEvento> it=this.coleccion.find(Filters.eq("tipo", tipo.toString()));
            if(it.first()!=null){
                for (EntidadEvento ev : it) {
                    eventos.add(ev);
                }
                return eventos;
            }
            return null;
        } catch (MongoException e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al consultar los eventos");
        }
    }
    
//    private List<EntidadEvento> filtrarEventosPorFecha(List<EntidadEvento> eventos,Calendar fechaFiltro){
//        Calendar inicioDia = fechaFiltro;
//        inicioDia.setTimeZone(TimeZone.getTimeZone("America/Arizona"));
//        inicioDia.set(Calendar.HOUR_OF_DAY, 0);
//        inicioDia.set(Calendar.MINUTE, 0);
//        
//        String diaSemana=obtenerDiaSemana(fechaFiltro);
//        
//        List<EntidadEvento> eventosFiltrados=new ArrayList<>();
//        String[] arrDias;
//        for (EntidadEvento evento : eventos) {
//            if(evento.getTipo().equals(EntidadTipoEventoEnum.UNICO_UN_DIA)){
//                if(evento.getFechaInicio().after(inicioDia.getTime()))
//                    eventosFiltrados.add(evento);
//            }else{
//                arrDias=evento.getDiasSemana().split(",");
//                for (String arrDia : arrDias) {
//                    if (arrDia.equals(diaSemana)) {
//                        eventosFiltrados.add(evento);
//                    }
//                }
//            }
//        }
//        return eventosFiltrados;
//    }
    
    public EntidadEvento obtenerEvento(EntidadEvento evento)throws PersistenciaExceptionn{
        try{
            EntidadEvento e= coleccion.find(Filters.eq("nombre", evento.getNombre())).first();
            if(e!=null)return e;
            return null;
        }catch(MongoException e){
            LOG.log(Level.SEVERE, e.getMessage(), e);
            throw new PersistenciaExceptionn("Hubo un error al consultar el evento");
        }
    }
    
    public boolean cerrarConexion(){
        Conexion.cerrarConexion();
        return true;
    }
}
